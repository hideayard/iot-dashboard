<html>
    <head>
    <script src="//unpkg.com/brain.js"></script>
    <script>
        const net = new brain.recurrent.LSTMTimeStep({
  inputSize: 8,
  hiddenLayers: [10],
  outputSize: 8,
});

// Same test as previous, but combined on a single set
// const trainingData = [
//   [
//     [1, 5],
//     [2, 4],
//     [3, 3],
//     [4, 2],
//     [5, 1],
//   ],
// ];

let objectTrainingData = JSON.parse('[[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[3.04,3.42,3.61,2.48,2.86,3.42,2.11,3.61],[3.04,3.42,3.61,2.48,2.86,3.42,2.11,3.61],[3.04,3.42,3.61,2.48,2.86,3.42,0.8,3.61],[3.04,3.42,3.61,2.48,2.86,3.61,0.8,3.61],[3.04,3.42,3.61,2.48,3.04,3.61,0.8,3.61],[3.04,3.42,3.61,2.3,3.04,3.61,0.8,3.61],[3.04,3.42,3.61,2.3,3.04,3.61,0.8,3.61],[3.04,3.04,3.61,2.3,3.04,3.61,0.8,3.61],[2.67,3.04,3.61,2.3,3.04,3.61,0.8,3.61],[2.67,3.04,3.61,2.3,3.04,3.61,0.8,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.48,3.04,3.61,2.3,3.42],[2.67,3.04,3.79,2.48,3.04,3.61,2.3,3.42],[2.67,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42]]');
console.log("objectTrainingData=",objectTrainingData);

// var trainingData = Object.keys(objectTrainingData[0]).map((key) => [Number(key), objectTrainingData[0][key]]);
var trainingData = [[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[-100,3,4,1,2,-20,-10,-30],[3.04,3.42,3.61,2.48,2.86,3.42,2.11,3.61],[3.04,3.42,3.61,2.48,2.86,3.42,2.11,3.61],[3.04,3.42,3.61,2.48,2.86,3.42,0.8,3.61],[3.04,3.42,3.61,2.48,2.86,3.61,0.8,3.61],[3.04,3.42,3.61,2.48,3.04,3.61,0.8,3.61],[3.04,3.42,3.61,2.3,3.04,3.61,0.8,3.61],[3.04,3.42,3.61,2.3,3.04,3.61,0.8,3.61],[3.04,3.04,3.61,2.3,3.04,3.61,0.8,3.61],[2.67,3.04,3.61,2.3,3.04,3.61,0.8,3.61],[2.67,3.04,3.61,2.3,3.04,3.61,0.8,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.3,3.04,3.61,2.3,3.42],[2.67,3.04,3.61,2.48,3.04,3.61,2.3,3.42],[2.67,3.04,3.79,2.48,3.04,3.61,2.3,3.42],[2.67,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.3,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.48,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42],[3.04,3.42,3.79,2.3,3.04,3.61,2.11,3.42]];
console.log("trainingData=",trainingData);
net.train(trainingData, { log: true, errorThresh: 0.09 });

// const closeToFiveAndOne = net.run([
//   [1, 5],
//   [2, 4],
//   [3, 3],
//   [4, 2],
// ]);

// now we're cookin' with gas!
const forecast = net.forecast(
    [ [-100,3,4,1,2,-20,-10,-30] ],
    2
);

console.log('next 2 predictions', forecast);



// const net2 = new brain.recurrent.LSTM();

// net2.train([
//   { input: 'I feel great about the world!', output: 'happy' },
//   { input: 'The world is a terrible place!', output: 'sad' },
// ]);

// const output = net2.run('I feel great about the world!'); // 'happy'
// console.log("output = ",output);

// const net3 = new brain.recurrent.LSTM();

// net3.train(['I am brainjs, Hello World!']);

//   const output3 = net3.run('I am brainjs');
//   alert(output3);

    </script>
    <title>trial ML brain.js</title>
    </head>
    <body>
    trial ML brain.js
    </body>
</html>